/**
 * @name    s-chip-component
 * Provide a nice and simple chip element
 *
 * @example   html
 * <span class="chip">
 *   <span class="chip__text">
 *     Hello World
 *   </span>
 *   <span class="chip__addon">
 *     <i class="fa fa-user"></i>
 *   </span>
 * </span>
 *
 * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */

/**
 * Print out the bare and style component css
 * Generated classes:
 * - `.chip`
 * - `.chip__addon`
 * - `.chip__text`
 * - `.chip--closable`
 * - `.chip--{color}`
 * @param 	{List<Color>} 		[$color=default primary secondary] 		The colors to generate
 */
@mixin s-chip-classes(
  $colors: default primary secondary
) {
  @include s-chip-classes-bare();
  @include s-chip-classes-style($colors);
}

/**
 * Print out the bare component css
 * Generated classes:
 * - `.chip`
 * - `.chip__addon`
 * - `.chip__text`
 */
@mixin s-chip-classes-bare() {
  @include s-component('chip') {
    .#{s-component()} {
      border-radius: (1em + s-lnf(padding-horizontal)) / 2;
      position: relative;
      display: inline-flex;
      align-items: center;
      width: auto;
      height: 1em + s-lnf(padding-horizontal) + 0.15em;
      vertical-align: middle;
    }

    .#{s-component()}__addon {
      border-radius: 50%;
      height: 1em + s-lnf(padding-horizontal) + 0.15em - 0.6em;
      width: 1em + s-lnf(padding-horizontal) + 0.15em - 0.6em;
      display: inline-block;
      position: relative;
      left: 0.3em;
      // text-align: center;
      // line-height: 1em + s-lnf(padding-horizontal) * 2 + 0.15em - 0.6em;
      overflow: hidden;
      flex: 0 auto;

      &:first-child {
        margin-right: s-lnf(padding-vertical) * 0.1;
      }

      &:last-child {
        margin-left: s-lnf(padding-vertical) * 0.1;
        left: auto;
        right: 0.3em;
      }

      * {
        position: absolute;
        top: 50%;
        left: 50%;

        @include s-translate(-50%, -50%);
      }

      img {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
    }

    .#{s-component()}__text {
      padding: 0 s-lnf(padding-vertical) * 0.5;
      flex: 0;
      white-space: nowrap;
    }
  }
}

/**
 * Print out the style component css
 * Generated classes:
 * - `.chip--closable`
 * - `.chip--{color}`
 * @param 	{List<Color>} 		[$color=default primary secondary] 		The colors to generate
 */
@mixin s-chip-classes-style(
  $colors: default primary secondary
) {
  @include s-component('chip') {
    .#{s-component()}__addon {
      @include s-transition(fast);
    }

    /**
     * @name    `.#{s-component()}.#{s-component()}--closable`
     * Closable #{s-component()}
     * @styleguide    Atoms / #{_start-case(s-component())}
     * @example    html
     * <span class="#{s-component()} #{s-component()}--closable">
     *   <span class="#{s-component()}__text">
     *     Hello World
     *   </span>
     *   <span class="#{s-component()}__addon"></span>
     * </span>
     * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    .#{s-component()}--closable {
      .#{s-component()}__addon {
        cursor: pointer;

        &:hover {
          color: white;
          background-color: s-color(error);
        }
      }
    }

    @each $color in $colors {
      $sel : ".#{s-component()}--#{$color}";

      @if $color == default {
        $sel : ".#{s-component()}";
      }

      /**
       * @name    <span class="c-#{$color}">#{_start-case($color)}</span> #{s-component()} `.#{s-component()}#{$sel}`
       * #{_start-case($color)} #{s-component()}
       * @styleguide    Atoms / #{_start-case(s-component())}
       * @example    html
       * <span class="#{s-component()} #{s-component()}--#{$color}">
       *   <span class="#{s-component()}__text">
       *     Hello World
       *   </span>
       *   <span class="#{s-component()}__addon"></span>
       * </span>
       * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
       */
      #{$sel} {
        background-color: s-color($color);
        color: white;

        .#{s-component()}__addon {
          background-color: s-color($color, -lighten 15%);
        }
      }
    }
  }
}
